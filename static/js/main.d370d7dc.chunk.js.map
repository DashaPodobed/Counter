{"version":3,"sources":["reportWebVitals.ts","Redux/CountReducer.ts","Redux/store.ts","Count/Screen.tsx","Count/UniversalButton/UniversalButton.tsx","Count.tsx","CountValue/SetButton.tsx","CountValue/inputValue.tsx","CountValue/CountValue.tsx","AppWithRedux.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","InitialState","value","maxValue","startValue","disabled","error","ChangeDisabledValueAC","newValue","type","rootReducer","combineReducers","count","state","action","newMaxValue","newStartValue","store","createStore","window","Screen","props","className","UniversalButton","title","callback","onClick","Count","inc","reset","SetButton","InputValue","dispatch","useDispatch","onChange","e","changeValue","currentTarget","valueAsNumber","CountValue","changeStartValue","changeMaxValue","App","useSelector","useEffect","maxValueAsString","localStorage","getItem","startValueAsString","JSON","parse","setItem","stringify","ChangeMaxValueAC","ChangeStartValueAC","actionDispatch","ReactDOM","render","StrictMode","AppWithRedux","document","getElementById"],"mappings":"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","file":"static/js/main.d370d7dc.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","type RESET_AT = {\n    type: \"RESET\",\n}\n\ntype INC_AT = {\n    type: \"INC\",\n}\n\ntype SET_AT = {\n    type: \"SET\",\n    newValue: number\n}\n\ntype CHANGE_MAX_VALUE_AT = {\n    type: \"CHANGE_MAX_VALUE_AT\",\n    newMaxValue: number\n}\n\ntype CHANGE_START_VALUE_AT = {\n    type: \"CHANGE_START_VALUE_AT\",\n    newStartValue: number\n}\n\ntype CHANGE_DISABLED_VALUE_AT = {\n    type: \"CHANGE_DISABLED_VALUE_AT\",\n    newValue: boolean\n}\n\ntype ActionType = RESET_AT | INC_AT | SET_AT | CHANGE_MAX_VALUE_AT | CHANGE_START_VALUE_AT | CHANGE_DISABLED_VALUE_AT\n\nconst InitialState = {\n    value: 0,\n    maxValue: 0,\n    startValue: 0,\n    disabled: true,\n    error: \"Incorrect value\"\n}\n\ntype InitialStateType = typeof InitialState\n\nexport const CountReducer = (state: InitialStateType = InitialState, action: ActionType) => {\n    switch (action.type) {\n        case \"RESET\":\n            return {...state, value: state.value = 0, maxValue: state.maxValue = 0, startValue: state.startValue = 0}\n        case \"INC\":\n            return {...state, value: state.value + 1}\n        case \"SET\":\n            return {...state, value: state.value = state.startValue}\n        case \"CHANGE_MAX_VALUE_AT\":\n            return {...state, maxValue: action.newMaxValue}\n        case \"CHANGE_START_VALUE_AT\":\n            return {...state, startValue: action.newStartValue}\n        case \"CHANGE_DISABLED_VALUE_AT\":\n            return {...state, disabled: action.newValue}\n        default:\n            return state\n    }\n}\n\nexport const ResetAC = (): RESET_AT => {\n    return {type: \"RESET\"}\n}\nexport const IncAC = (): INC_AT=> {\n    return {type: \"INC\"}\n}\nexport const SetAC = (newValue: number): SET_AT=> {\n    return {type: \"SET\", newValue}\n}\nexport const ChangeMaxValueAC = ( newMaxValue: number):CHANGE_MAX_VALUE_AT => {\n    return {type: \"CHANGE_MAX_VALUE_AT\", newMaxValue}\n}\nexport const ChangeStartValueAC = (newStartValue: number):CHANGE_START_VALUE_AT => {\n    return {type: \"CHANGE_START_VALUE_AT\", newStartValue}\n}\nexport const ChangeDisabledValueAC = (newValue: boolean):CHANGE_DISABLED_VALUE_AT => {\n    return {type: \"CHANGE_DISABLED_VALUE_AT\", newValue}\n}\n","import {combineReducers, createStore} from 'redux';\nimport {CountReducer} from \"./CountReducer\";\n\nconst rootReducer = combineReducers({\n    count: CountReducer,\n})\nexport const store = createStore(rootReducer);\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n// @ts-ignore\nwindow.store = store;","import React from \"react\";\nimport \"./Screen.css\"\n\ntype CountType = {\n    startValue: number\n    maxValue: number\n    error: string\n}\nconst Screen = (props: CountType) => {\n    return (\n        <div>\n            <span className={props.startValue === props.maxValue ? \"number-color\" : \"\"}>\n                {props.startValue > props.maxValue\n                    ? <div className=\"number-color\">{props.error}</div>\n                    : props.startValue\n                }\n            </span>\n        </div>\n    )\n}\n\nexport default Screen;","import React from \"react\";\nimport \"./UniversalButton.css\"\n\ntype UniversalButtonType = {\n    title: string\n    callback: () => void\n    disabled: boolean\n}\n\nconst UniversalButton: React.FC<UniversalButtonType> = ({title, callback, disabled}) => {\n\n    return (\n        <button\n            onClick={callback}\n            disabled={disabled}\n        >{title}</button>)\n}\n\nexport default UniversalButton;","import React from \"react\";\nimport Screen from \"./Count/Screen\";\nimport UniversalButton from \"./Count/UniversalButton/UniversalButton\";\n\n\ntype CountType = {\n    value: number\n    inc: () => void\n    reset: () => void\n    maxValue: number\n    startValue: number\n    disabled: boolean\n    error: string\n}\n\nconst Count: React.FC<CountType> = ({startValue, inc, reset, maxValue, disabled, error, value}) => {\n\n    return (\n        <div className={\"form-group\"}>\n            <div className={\"form-count\"}>\n                <Screen startValue={startValue} maxValue={maxValue}  error={error}/>\n            </div>\n            <div className={\"form-btn\"}>\n                <UniversalButton callback={inc} title={\"inc\"} disabled={disabled || startValue === maxValue || startValue > maxValue}/>\n                <UniversalButton callback={reset} title={\"reset\"} disabled={disabled || maxValue > value}/>\n            </div>\n        </div>\n    )\n}\n\nexport default Count;","import React from \"react\";\ntype SetButtonType = {\n    callback: () => void\n    disabled: boolean\n    startValue: number\n    maxValue: number\n}\n\nconst SetButton = (props: SetButtonType) => {\n\n    return (\n\n        <div>\n            <button\n                onClick={props.callback}\n                disabled={!props.disabled || props.startValue < 0 || props.maxValue < 0 }\n            >set</button>\n        </div>\n    )\n}\n\nexport default SetButton;","import React, {ChangeEvent} from \"react\";\nimport {ChangeDisabledValueAC} from \"../Redux/CountReducer\";\nimport {useDispatch} from \"react-redux\";\n\ntype StartValueType = {\n    title: string\n    value: number\n    changeValue: (newInputValue: number) => void\n    className: string\n    disabled: boolean\n}\nconst InputValue = (props: StartValueType) => {\nconst dispatch = useDispatch()\n    const changeValue = (e: ChangeEvent<HTMLInputElement>) => {\n        props.changeValue(e.currentTarget.valueAsNumber)\n        let action = ChangeDisabledValueAC(true)\n        dispatch(action)\n    }\n\n    return (\n        <span>\n        <h5>{props.title}</h5>\n        <input\n            className={props.className}\n            type={\"number\"}\n            value={props.value}\n            onChange={changeValue}\n        />\n    </span>\n    )\n}\nexport default InputValue;","import React from \"react\";\nimport SetButton from \"./SetButton\";\nimport InputValue from \"./inputValue\";\n\ntype CountValueType = {\n    maxValue: number\n    startValue: number\n    changeMaxValue: (newMaxValue: number) => void\n    changeStartValue: (newCountValue: number) => void\n    callback: () => void\n    disabled: boolean\n}\nconst CountValue = (props: CountValueType) => {\n    return (\n        <div className=\"form-group\">\n            <div>\n                <InputValue\n                    className={props.startValue < 0 ? \"input-error\" : \"\"}\n                    title={\"start value\"}\n                    value={props.startValue}\n                    changeValue={props.changeStartValue}\n                    disabled={props.disabled}\n                />\n                <InputValue\n                    className={props.maxValue < 0 ? \"input-error\" : \"\"}\n                    title={\"max value\"}\n                    value={props.maxValue}\n                    changeValue={props.changeMaxValue}\n                    disabled={props.disabled}\n                />\n\n            </div>\n            <div>\n                <SetButton\n                    maxValue={props.maxValue}\n                    startValue={props.startValue}\n                    callback={props.callback}\n                    disabled={props.disabled}\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default CountValue;","import React, {useEffect} from 'react';\nimport './App.css'\nimport Count from \"./Count\";\nimport CountValue from \"./CountValue/CountValue\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./Redux/store\";\nimport {ChangeDisabledValueAC, ChangeMaxValueAC, ChangeStartValueAC, IncAC, ResetAC, SetAC} from \"./Redux/CountReducer\";\n\nfunction App() {\n\n    const value = useSelector<AppRootStateType, number>(state => state.count.value)\n    const maxValue = useSelector<AppRootStateType, number>(state => state.count.maxValue)\n    const startValue = useSelector<AppRootStateType, number>(state => state.count.startValue)\n    const error = useSelector<AppRootStateType, string>(state => state.count.error)\n    const disabled = useSelector<AppRootStateType, boolean>(state => state.count.disabled)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        let maxValueAsString = localStorage.getItem('MaxValue')\n        let startValueAsString = localStorage.getItem('StartValue')\n        if (maxValueAsString) {\n            let newMaxValue = JSON.parse(maxValueAsString)\n            changeMaxValue(newMaxValue)\n        }\n        if (startValueAsString) {\n            let newStartValue = JSON.parse(startValueAsString)\n            changeStartValue(newStartValue)\n        }\n    }, [])\n\n    useEffect(() => {\n        localStorage.setItem('MaxValue', JSON.stringify(maxValue))\n        localStorage.setItem('StartValue', JSON.stringify(startValue))\n    }, [maxValue, startValue])\n\n    const changeMaxValue = (newMaxValue: number) => {\n        let action = ChangeMaxValueAC(newMaxValue)\n        dispatch(action)\n    }\n\n    const changeStartValue = (newStartValue: number) => {\n        let action = ChangeStartValueAC(newStartValue)\n        dispatch(action)\n    }\n\n    const inc = () => {\n        let action = IncAC()\n        dispatch(action)\n    }\n\n    const reset = () => {\n        let actionDispatch = ChangeDisabledValueAC(true)\n        dispatch(actionDispatch)\n        let action = ResetAC()\n        dispatch(action)\n    }\n\n    const set = () => {\n        let actionDispatch = ChangeDisabledValueAC(false)\n        dispatch(actionDispatch)\n\n        let action = SetAC(startValue)\n        dispatch(action)\n    }\n\n    return (\n        <div className={\"App\"}>\n            <Count\n                value={value}\n                startValue={value}\n                inc={inc}\n                reset={reset}\n                maxValue={maxValue}\n                disabled={disabled}\n                error={error}\n\n            />\n            <CountValue\n                maxValue={maxValue}\n                startValue={startValue}\n                changeMaxValue={changeMaxValue}\n                changeStartValue={changeStartValue}\n                callback={set}\n                disabled={disabled}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./Redux/store\";\nimport AppWithRedux from \"./AppWithRedux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n        <AppWithRedux/>\n        </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}